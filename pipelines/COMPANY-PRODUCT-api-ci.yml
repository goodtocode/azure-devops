trigger:
  batch: false
  branches:
    include:
      - "*"
    exclude:
      - "main"
  paths:
    include:
      - src/Core/**
      - src/Infrastructure/**
      - src/Presentation/**
      - tests/**

pr:
  branches:
    include:
      - "main"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: build
    variables:
      - template: ../variables/common-ci.yml
    jobs:
      - job: build_src
        steps:
          - task: PowerShell@2
            displayName: 'Set-Version.ps1'
            inputs:
              filePath: '$(scriptsPath)/Set-Version.ps1'
              arguments: '-Path $(srcPath) -VersionToReplace 1.0.0 -Major 1 -Minor 0 -Revision 0 -CommitHash $(Build.SourceVersion) -Build $(Build.BuildNumber)'
              workingDirectory: '$(scriptsPath)'

          - task: UseDotNet@2
            displayName: UseSDKVersion
            inputs:
              packageType: 'sdk'
              version: $(dotnetVersion)
              includePreviewVersions: true

          - task: DotNetCoreCLI@2
            displayName: dotnetrestore
            inputs:
              command: 'restore'
              projects: "$(srcSolution)"
              feedsToUse: 'config'
              nugetConfigPath: "$(nugetConfig)"

          - task: DotNetCoreCLI@2
            displayName: dotnet build
            inputs:
              command: 'build'
              projects: "$(srcProject)"
              arguments: "--configuration $(buildConfiguration)"

      - job: test_src
        dependsOn: build_src
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: 'test'
              projects: "$(testProject)"
              arguments: "--configuration $(buildConfiguration)"
              publishTestResults: true

      - job: publish_src
        dependsOn: test_src
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: "$(srcProject)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: Publishbuildartifacts
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: 'drop'
              publishLocation: "Container"
