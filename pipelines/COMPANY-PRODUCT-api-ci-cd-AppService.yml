trigger:
  batch: false
  branches:
    include:
    - 'main'
  paths:
    include:
    - .azure-devops/pipelines/COMPANY-PRODUCT-api-ci-cd-appservice.yml
    - src/Core/**
    - src/Infrastructure/**
    - src/Presentation/WebApi/**
    - tests/**

pr:
  branches:
    include:
    - 'main'

pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: ForceDeployDev
    type: boolean
    default: false
  - name: ForceDeployProd
    type: boolean
    default: false

variables:
  - name: ConnectionStrings.Default
    value: '$(sqlConnection)'

stages:
  - stage: build
    variables:
      - template: ../variables/ci-common.yml
    jobs:
      - job: build_src
        steps:
          - task: PowerShell@2
            displayName: 'Set-Version.ps1'
            inputs:
              filePath: '$(scriptsPath)/Set-Version.ps1'
              arguments: '-Path $(srcPath) -VersionToReplace 1.0.0 -Major 1 -Minor 0 -Revision 0 -CommitHash $(Build.SourceVersion) -Build $(Build.BuildNumber)'
              workingDirectory: '$(scriptsPath)'

          - task: UseDotNet@2
            displayName: UseSDKVersion
            inputs:
              packageType: 'sdk'
              version: $(dotnetVersion)
              includePreviewVersions: true

          - task: DotNetCoreCLI@2
            displayName: dotnetrestore
            inputs:
              command: 'restore'
              projects: "$(srcSolution)"
              feedsToUse: 'config'
              nugetConfigPath: "$(nugetConfig)"

          - task: DotNetCoreCLI@2
            displayName: dotnet build
            inputs:
              command: 'build'
              projects: "$(srcProject)"
              arguments: "--configuration $(buildConfiguration)"

      - job: test_src
        dependsOn: build_src
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: 'test'
              projects: "$(testProject)"
              arguments: "--configuration $(buildConfiguration)"
              publishTestResults: true

      - job: publish_src
        dependsOn: test_src
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet publish
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: "$(srcProject)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: Publishbuildartifacts
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: 'drop'
              publishLocation: "Container"

  - stage: deploy_dev
    dependsOn: build
    condition: and(succeeded(), or(eq(lower(${{ parameters.ForceDeployDev }}), 'true'), and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))))
    variables:
      - template: ../variables/cd-development.yml
      
    jobs:
      - job: deploy_approval
        pool: server
        timeoutInMinutes: 4320
        steps:
        - task: FileTransform@1
          displayName: 'Variable transformation'
          inputs:
            folderPath: '$(Pipeline.Workspace)/**/*.zip'
            fileType: 'json'
            targetFiles: 'appsettings.$(environmentApp).json'

        - task: AzureWebApp@1
          displayName: Deploy to webapp
          inputs:
            azureSubscription: '${{ parameters.subscriptionService }}'
            appType: 'webApp'
            appName: '$(appName)'
            package: '$(Pipeline.Workspace)/**/*.zip'
            deploymentMethod: 'zipDeploy'

  - stage: deploy_prod
    dependsOn: deploy_dev
    condition: or(eq(lower(${{ parameters.ForceDeployProd }}), 'true'), and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))))
    variables:
      - template: ../variables/cd-production.yml

    jobs:
      - job: deploy_approval
        pool: server
        timeoutInMinutes: 4320
        steps:
        - task: ManualValidation@0
          inputs:
           notifyUsers: $(deployApprovers)
           instructions: "Team: $(System.TeamProject)\r\nRepo: $(Build.Repository.Name)\r\nRequested by: $(Build.RequestedFor)\r\nBuild: $(Build.BuildNumber)\r\nUrl: $(Build.BuildUri)\r\nA new deployment has been requested. Please approve or reject the deployment."
           onTimeout: reject
      
      - job: deploy_approval
        pool: server
        steps:
        - task: FileTransform@1
          displayName: 'Variable transformation'
          inputs:
            folderPath: '$(Pipeline.Workspace)/**/*.zip'
            fileType: 'json'
            targetFiles: 'appsettings.$(environmentApp).json'

        - task: AzureWebApp@1
          displayName: Deploy to webapp
          inputs:
            azureSubscription: '${{ parameters.subscriptionService }}'
            appType: 'webApp'
            appName: '$(appName)'
            package: '$(Pipeline.Workspace)/**/*.zip'
            deploymentMethod: 'zipDeploy'